.. _rosettascripts:

.. currentmodule:: rstoolbox

RosettaScripts
==============

The `RosettaScripts interface <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/RosettaScripts>`_ is one of the most flexible
ways to combine different protocols into a full design pipeline. It is perfectly suited for both programmers and non-programmers to generate complex design protocols.

More information on the use of this scripting language can be found in the open
`documentation <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/RosettaScripts>`_ and in its release publication:

  Fleishman SJ, Leaver-Fay A, Corn JE, Strauch E-M, Khare SD, Koga N, et al. (2011)
  **RosettaScripts: A Scripting Language Interface to the Rosetta Macromolecular Modeling Suite.**
  `PLoS ONE 6(6): e20161. <https://doi.org/10.1371/journal.pone.0020161>`_

Most `Movers <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/Movers/Movers-RosettaScripts>`_,
`SimpleMetrics <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/SimpleMetrics/SimpleMetrics>`_
and `Filters <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/Filters/Filters-RosettaScripts>`_ store their evaluation values as
regular scores, which can be directly picked by the ``rstoolbox`` and properly selected, if needed, through the specified :ref:`reading options <readrosetta>`.

Still, ``rstoolbox`` is also prepared to pick specially formatted data generated by particular elements:

* `DisplayPoseLabelsMover <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/xsd/mover_DisplayPoseLabelsMover_type>`_ adds to the
  silent files the labels assigned to the residues of a design. This can be picked up through the :ref:`labels option <readrosetta>`. Notice that, in order to store
  the labels into the ``silent file``, the option ``write`` **must be True**::

    <DisplayPoseLabelsMover name="(&string;)" write="1" />

* `WriteSSEMover <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/xsd/mover_WriteSSEMover_type>`_ can append secondary structure
  identification (**DSSP**), secondary structure prediction (**PSIPRED**) and phi/psi angles to the silent file, which can be read with the
  :ref:`structure, psipred and dihedrals options <readrosetta>`. This is the main mover called by the function :func:`.get_sequence_and_structure`. The actual script
  that is executed can be found in :func:`.baseline`:

  .. ipython::

    In [1]: from rstoolbox.utils import baseline
       ...: print(baseline())

* `ddgMover <https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/Movers/movers_pages/ddGMover>`_ is one of the few that can generate
  `per-residue` scores. When such an option is active, the data can be retrieved and properly sorted with the :ref:`scores_by_residue option <readrosetta>`. To
  enforce that behaviour in the mover, the ``per_residue_ddg`` option **must be True**::

    <ddG name="(&string)" per_residue_ddg="1" "/>

.. tip::
  **Are you using a different design platform that is not Rosetta?**

  Just :ref:`add you parser <contributing>` to start taking advantage of ``rstoolbox`` in your own pipeline.